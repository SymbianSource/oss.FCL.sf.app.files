/*
* Copyright (c) 2002 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0""
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: 
*     This file contains declarations for resources of memscaneng.
*     The file can be included only in resource file.
*     
*
*/


//  INCLUDES
#include "mseng.hrh"

//  STRUCTURE DEFINITIONS


// ---------------------------------------------------------
//    DIRECTORYARRAY
//    
//    The directories that are scanned (array of dir paths)
// ---------------------------------------------------------
//
STRUCT DIRECTORYARRAY
    {
    LTEXT directories[];
    }

// ---------------------------------------------------------
//    UIDTYPEELEMENT
//
//    This struct maps one UID type from enum TUidTypes
//    to the value of the UID.
// ---------------------------------------------------------
//
STRUCT UIDTYPEELEMENT
    {
    BYTE uidtype;
    LONG uid; 
    }

// ---------------------------------------------------------
//    UIDARRAY
//
//    This array contain all the used UID type elements. 
// ---------------------------------------------------------
//
STRUCT UIDARRAY
    {
    STRUCT uidtypeelements[];
    }

// ---------------------------------------------------------
//    EXTTYPEELEMENT
//
//    This struct maps one extension type from enum TExtTypes
//    to the string representing the extension
// ---------------------------------------------------------
//
STRUCT EXTTYPEELEMENT
    {
    BYTE exttype;
    LTEXT extension;
    }

// ---------------------------------------------------------
//    EXTARRAY
//
//    This array contain all the extension type elements used.
// ---------------------------------------------------------
//
STRUCT EXTARRAY
    {
    STRUCT exttypeelements[];
    }

// ---------------------------------------------------------
//    DATAGROUPNAMEELEMENT
//
//    This struct maps one data group from enum TDataGroups
//    to the actual string representing the name of 
//    the data group
// ---------------------------------------------------------
//
STRUCT DATAGROUPNAMEELEMENT
    {
    BYTE grouptype; 
    LTEXT groupname;
    }

// ---------------------------------------------------------
//    DATAGROUPNAMEARRAY
//
//    This array contains all data group names
// ---------------------------------------------------------
//
STRUCT DATAGROUPNAMEARRAY
    {
    STRUCT datagroupnameelements[];
    }

// ---------------------------------------------------------
//    DATAGROUPUIDS
//
//    List of UIDs belonging to a data group.
// ---------------------------------------------------------
//
STRUCT DATAGROUPUIDS
    {
    BYTE datagroup;
    BYTE uids[];
    }

// ---------------------------------------------------------
//    DATAGROUPUIDARRAY
//
//    This array includes for, each data group,
//    (enum TDataGroups), the list of UIDs (enum TUidTypes)
//    belonging to that data group.
// ---------------------------------------------------------
//
STRUCT DATAGROUPUIDARRAY
    {
    STRUCT datagroupuids[];
    }

// ---------------------------------------------------------
//    DATAGROUPEXTS
//
//    List of extension belonging to a data group.
// ---------------------------------------------------------
//
STRUCT DATAGROUPEXTS
    {
    BYTE datagroup;
    BYTE exts[];
    }

// ---------------------------------------------------------
//    DATAGROUPEXTARRAY
//
//    This array includes for, each data group,
//    (enum TDataGroups), the list of extension 
//    (enum TExtTypes) belonging to that data group.
// ---------------------------------------------------------
//
STRUCT DATAGROUPEXTARRAY
    {
    STRUCT datagroupexts[];
    }

// ---------------------------------------------------------
//    EXTRADATAFILE
//
//    Specific file that is scanned separately from
//    normal uid or ext scanning.
// ---------------------------------------------------------
//
STRUCT EXTRADATAFILE
    {
    BYTE datagroup;
    LTEXT filepath;
    }

// ---------------------------------------------------------
//    EXTRADATAFILES
//
//    Specific files that is scanned separately from
//    normal uid or ext scanning.    
// ---------------------------------------------------------
//
STRUCT EXTRADATAFILES
    {
    STRUCT extradatafile[];
    }

// ---------------------------------------------------------
//    SPECIAL_DATADIR
//
//    A directory, where all files belong to the same
//    data group.
// ---------------------------------------------------------
STRUCT SPECIAL_DATADIR
    {
    BYTE datagroup;
    LTEXT path;
    LTEXT excludeddatafiles[];
    }

// ---------------------------------------------------------
//    SPECIAL_DATADIRS
//
//    This array of above defined special directories.
//    
// ---------------------------------------------------------
STRUCT SPECIAL_DATADIRS
    {
    STRUCT special_datadir[];
    }

// End of File
